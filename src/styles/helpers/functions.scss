/**
 *  rem($value)
 *
 *  Function to quickly convert px value to rem
 *
 *  $value - A number with px unit
 *
 */

@function rem($value) {

  @if (type-of($value) == number) {
    @if (unit($value) != "px") {
      @error "`#{$value}` needs to be a pixel value.";
    }
  } @else {
    @error "`#{$value}` needs to be a number.";
  }

  @return $value / $size-base * 1rem;
}

/**
 *  Round a number to specified digits.
 *
 *  @param  {Number} $number A number to round
 *  @param  {Number} [$digits:0] Digits to output
 *  @param  {String} [$mode:round] (round|ceil|floor) How to round a number
 *  @return {Number} A rounded number
 *  @example
 *      decimal-round(0.333)    => 0
 *      decimal-round(0.333, 1) => 0.3
 *      decimal-round(0.333, 2) => 0.33
 *      decimal-round(0.666)    => 1
 *      decimal-round(0.666, 1) => 0.7
 *      decimal-round(0.666, 2) => 0.67
 *
 */

@function decimal-round ($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

/**
 *  Convert sass string to a number
 *
 *  @param  {String} $string A string to convert
 *  @return {Number} A number
 *  @example
 *      number('12')    => 12
 *
 */

@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);;
}
