<script data-dataLayer>

  /*
  ===================================
  | DATALAYER ARCHITECTURE: SHOPIFY |
  -----------------------------------
  1. Add jQuery Selectors [AAA]
  2. [TODO] Add the following events:
    - Inline cart
    - Newsletter Signup
    - Wishlist
    - Quick view / shop
    - Custom AJAX functionality
  3. Remove all comments, save as dataLayer.liquid
  4. Include snippet directly above GTM

  1. Steps for everything has been added to the Datalayer.
  2. Collections: Need to work with Patrick to figure out what's actually needed.
  3. __prg__ object selectors need event bindings added on line 454. All the actions should be in the new DataLayer (or the old one).
  4. Everything still needs to be tested. It's currently still a lot of pieces of a thing rather than a coherent whole.
  */

  (function () {

    {% include 'dataLayer-config' %}

    // init data layer if doesn't already exist
    window.dataLayer = window.dataLayer || [];

    // begin datalayer
    dataLayer.push({ 'event': 'Begin DataLayer' });


    /* DATALAYER: Log State
    -----------------------
    1. Determine if user is logged in or not.
    2. Return User specific data. */

    {% assign _dataLayer_isCustomer = false %}
    {% if customer %}
      {% assign _dataLayer_isCustomer = true %}
    {% endif %}

    {% assign _dataLayer_logState = 'Logged Out' %}
    {% if customer %}
      {% assign _dataLayer_logState = 'Logged In' %}
    {% endif %}

    {% assign _dataLayer_customerType = 'New' %}
    {% if customer and customer.orders_count > 2 %}
      {% assign _dataLayer_customerType = 'Returning' %}
    {% endif %}


    var logState = {
      'isCustomer'    : {{ _dataLayer_isCustomer }},
      'logState'      : {{ _dataLayer_logState }},
      'customerType'  : {{ _dataLayer_customerType | json }},
      'userId'        : {{ customer.id | downcase | json }},
      'customerEmail' : {{ customer.email | json }},
      'checkoutEmail' : {{ checkout.email | json }},
      'currency'      : {{ shop.currency | json }},

      'customerInfo'  : {
        'firstName'   : {{ customer_address.first_name | json }},
        'lastName'    : {{ customer_address.last_name | json }},
        'address1'    : {{ customer_address.address1 | json }},
        'address2'    : {{ customer_address.address2 | json }},
        'street'      : {{ customer_address.street | json }},
        'city'        : {{ customer_address.city | json }},
        'province'    : {{ customer_address.province | json }},
        'zip'         : {{ customer_address.zip | json }},
        'country'     : {{ customer_address.country | json }},
        'phone'       : {{ customer_address.phone | json }},
        'totalOrders' : {{ customer.orders_count | downcase | json }},
        'totalSpent'  : {{ customer.total_spent | downcase | json }}
      },

      'shippingInfo' : {
        'fullName'   : {{ checkout.shipping_address.name | json }},
        'firstName'  : {{ checkout.shipping_address.first_name | json }},
        'lastName'   : {{ checkout.shipping_address.last_name | json }},
        'address1'   : {{ checkout.shipping_address.address1 | json }},
        'address2'   : {{ checkout.shipping_address.address2 | json }},
        'street'     : {{ checkout.shipping_address.street | json }},
        'city'       : {{ checkout.shipping_address.city | json }},
        'province'   : {{ checkout.shipping_address.province | json }},
        'zip'        : {{ checkout.shipping_address.zip | json }},
        'country'    : {{ checkout.shipping_address.country | json }},
        'phone'      : {{ checkout.shipping_address.phone | json }},
      },

      'billingInfo' : {
        'fullName'  : {{ checkout.billing_address.name | json }},
        'firstName' : {{ checkout.billing_address.first_name | json }},
        'lastName'  : {{ checkout.billing_address.last_name | json }},
        'address1'  : {{ checkout.billing_address.address1 | json }},
        'address2'  : {{ checkout.billing_address.address2 | json }},
        'street'    : {{ checkout.billing_address.street | json }},
        'city'      : {{ checkout.billing_address.city | json }},
        'province'  : {{ checkout.billing_address.province | json }},
        'zip'       : {{ checkout.billing_address.zip | json }},
        'country'   : {{ checkout.billing_address.country | json }},
        'phone'     : {{ checkout.billing_address.phone | json }},
      },

      'event'       : 'Customer State',
    };

    /* DATALAYER: Base Event
    --------------------------- */

    {% assign _dataLayer_pageType = template.name | json %}
    {% assign _dataLayer_pageEvent = template.name | json %}

    {% if _dataLayer_pageType == 'index' %}
      {% assign _dataLayer_pageType = 'homepage' %}
      {% assign _dataLayer_pageEvent = 'homepage' %}
    {% endif %}

    var url = window.location.href;

    var baseEvent = {
      'pageType': {{ _dataLayer_pageType }},
      'event': {{ _dataLayer_pageEvent }},
    };

    /* DATALAYER: Product List Page (Collections, Category)
    -------------------------------------------------------
    Fire on all product listing pages. */

    {% if template.name == 'collection' %}

      var products = [{%- for product in colleciton.products -%}{
        'id'              : {{ product.id | downcase | json }},
        'sku'             : {{ product.selected_variant.sku | json }},
        'variantId'       : {{ product.selected_variant.id | downcase | json }},
        'productType'     : {{ product.type }},
        'name'            : {{ product.title }},
        'price'           : {{ product.price | money_without_currency | remove: ',' | downcase | json }},
        'categories'      : {{ product.collections | map: 'title' | json }},
        'currentCategory' : {{ collection.title | json }},
      }{%- unless forloop.last -%},{%- endunless -%}{%- endfor -%}];

      baseEvent.products = products;
      baseEvent.productList = {{ collection.title | json }};

    {% endif %}

    /* DATALAYER: Product Page
    --------------------------
    Fire on all Product View pages. */

    {% if template.name == 'product' %}

      var product = {
        'id'              : {{ product.id | downcase | json }},
        'sku'             : {{ product.selected_variant.sku | json }},
        'variantId'       : {{ product.selected_variant.variant.id | downcase | json }},
        'productType'     : {{ product.type | json}},
        'name'            : {{ product.title | json }},
        'price'           : {{ product.price | money_without_currency | remove: "," | downcase | json }},
        'comparePrice'    : {{ product.compare_at_price_max | money_without_currency | downcase | json }},
        'description'     : {{ product.description | strip_newlines | strip_html | escape | json }},
        'imageURL'        : {{ product.featured_image.src | img_url: '600x' | prepend: 'https:' }},
        'brand'           : {{ product.vendor | json }},
        'categories'      : {{ product.collections | map: 'title' | json }},
        'currentCategory' : {{ collection.title | json }},
      };

      baseEvent.products = product;

    {% endif %}

    /* DATALAYER: Cart View
    -----------------------
    1. Fire anytime a user views their cart (non-dynamic) */

    {% if template.name == 'cart' %}

      var product = [{% for line_item in cart.items %}{
        'id'              : {{ line_item.id | downcase | json }},
        'sku'             : {{ line_item.selected_variant.sku | json }},
        'variantId'       : {{ line_item.selected_variant.variant.id | downcase | json }},
        'productType'     : {{ line_item.type | json}},
        'name'            : {{ line_item.title | json }},
        'price'           : {{ line_item.price | money_without_currency | remove: "," | downcase | json }},
        'comparePrice'    : {{ line_item.compare_at_price_max | money_without_currency | downcase | json }},
        'brand'           : {{ line_item.vendor | json }},
        'quantity'        : {{ line_item.quantity | downcase | json }},
      }{% unless forloop.last %},{% endunless %}{% endfor %}];

      baseEvent.products = product;

    {% endif %}

    /* DATALAYER Variable: Checkout & Transaction Data */

    if (url.indexOf('checkouts') > -1 || url.indexOf('order') > -1) {
      __prg__products = [];

      {% for line_item in checkout.line_items %}

        __prg__products.push({
          'id'           : {{ line_item.id | downcase | json }},
          'sku'          : {{ line_item.selected_variant.sku | json }},
          'variantId'    : {{ line_item.selected_variant.variant.id | downcase | json }},
          'productType'  : {{ line_item.type | json}},
          'name'         : {{ line_item.title | json }},
          'price'        : {{ line_item.price | money_without_currency | remove: "," | downcase | json }},
          'comparePrice' : {{ line_item.compare_at_price_max | money_without_currency | downcase | json }},
          'brand'        : {{ line_item.vendor | json }},
          'quantity'     : {{ line_item.quantity | downcase | json }},
        });

      {% endfor %}

      var transactionData = {
        'transactionNumber'      : {{ checkout.order_number | downcase | json }},
        'transactionId'          : {{ checkout.order_id | downcase | json }},
        'transactionAffiliation' : {{ shop.name | json }},
        'transactionCurrency'    : {{ shop.currency | json }},
        'transactionTotal'       : {{ checkout.total_price | money_without_currency| remove: "," | downcase | json }},
        'transactionTax'         : {{ checkout.tax_price | money_without_currency| remove: "," | downcase | json }},
        'transactionShipping'    : {{ checkout.shipping_price | money_without_currency | remove: "," | downcase | json }},
        'transactionSubtotal'    : {{ checkout.subtotal_price | money_without_currency | remove: "," | downcase | json }},
        {% for discount in checkout.discounts %}
        'promoCode' : {{ discount.code | json }},
        'discount'  : {{ discount.amount | money_without_currency| remove: "," | downcase | json }},
        {% endfor %}
        'products': __prg__products,
      };

      if (url.indexOf('thank_you') > -1) {
        baseEvent = transactionData;
        baseEvent.pageType = 'Transaction';
        baseEvent.eventType = 'Transaction';
        baseEvent.cancelled: {{ order.cancelled | json }},
        baseEvent.shipDate: {{ "now" | date: "%s" | plus: 86400 | date: "%Y-%m-%d" | json }},
        baseEvent.deliveryDate: {{ "now" | date: "%s" | plus: 345600 | date: "%Y-%m-%d" | json }},
        baseEvent.firstTime: {% if first_time_accessed == blank %}false{% else %}true{% endif %}
      }

      if (url.indexOf('order') > -1) {
        baseEvent = {
          'products': __prg__products,
          'pageType': 'Order Status',
          'eventType': 'Order Status',
        }
      };

      /* DATALAYER: Checkout
      -------------------------- */

      // remove reference to $ / jQuery

      if (url.indexOf('checkouts') > -1) {
        if (url.indexOf('contact_information') > -1 || $('[data-step]').data('step') === 'contact_information') {
          baseEvent = transactionData;
          baseEvent.pageType = 'Customer Information';
          baseEvent.eventType = 'Customer Information';
        } else if (url.indexOf('shipping_method') > -1 || $('[data-step]').data('step') === 'shipping_method') {
          baseEvent = transactionData;
          baseEvent.pageType = 'Shipping Information';
          baseEvent.eventType = 'Shipping Information';
        } else if(url.indexOf('payment_method') > -1 || $('[data-step]').data('step') === 'payment_method') {
          baseEvent = transactionData;
          baseEvent.pageType = 'Add Payment Info';
          baseEvent.eventType = 'Add Payment Info';
        }
      }
    }

    /*==========================
    | dataLayer Event Bindings |
    --------------------------*/
    $(document).ready(function() {
      /* [TODO] ADD TO CART */

      /*

        Notes:

        • tracking cart state not clicks on add to cart button
        • only care about adds to cart, not removes from cart or quantity changes
        • subscribe to cart change event?
        • add 'template' / 'triggeredFrom' property
        • possibly use cart scripting to facilitate add to cart event tracking

      */

      /* ADD TO CART */
      jQuery.getJSON('/cart.js', function (response) {
        __prg__.cart = response;
        var cart = {
          'products': __prg__.cart.items.map(function (line_item) {
            return {
              'id'       : line_item.id,
              'sku'      : line_item.sku,
              'variant'  : line_item.variant_id,
              'name'     : line_item.title,
              'price'    : (line_item.price/100),
              'quantity' : line_item.quantity
            }
          })
        }

      __prg__.cart = cart;
      collection_cartIDs = [];
      collection_matchIDs = [];
      collection_addtocart = [];
      for (var i = __prg__.cart.products.length - 1; i >= 0; i--) {
          var x = parseFloat(__prg__.cart.products[i].variant);
          collection_cartIDs.push(x);
      }
      });

      function __prg__addtocart(){
        {% if template contains 'collection' %}

          setTimeout(function(){
            jQuery.getJSON('/cart.js', function (response) {
              // --------------------------------------------- get Json response
              __prg__.cart = response;
              var cart = {
                'products': __prg__.cart.items.map(function (line_item) {
                  return {
                    'id'       : line_item.id,
                    'sku'      : line_item.sku,
                    'variant'  : line_item.variant_id,
                    'name'     : line_item.title,
                    'price'    : (line_item.price/100),
                    'quantity' : line_item.quantity
                  }
                })
              }
              __prg__.cart = cart;
              for (var i = __prg__.cart.products.length - 1; i >= 0; i--) {
                var x = parseFloat(__prg__.cart.products[i].variant);
                collection_matchIDs.push(x);
              }
              function arr_diff(b, c) {
                var a = [],
                diff = [];
                for (var i = 0; i < b.length; i++) {
                  a[b[i]] = true
                }
                for (var i = 0; i < c.length; i++) {
                  if (a[c[i]]) {
                    delete a[c[i]]
                  } else {
                    a[c[i]] = true
                  }
                }
                for (var k in a) {
                  diff.push(k)
                }
                return diff
              };
              var x = arr_diff(collection_cartIDs, collection_matchIDs).pop();
              console.log(x);
              for (var i = __prg__.cart.products.length - 1; i >= 0; i--) {
                if (__prg__.cart.products[i].variant.toString() === x) {
                  product = {'products':[__prg__.cart.products[i]]};
                  dataLayer.push({'products':product});
                  dataLayer.push(product);
                  dataLayer.push({
                    'pageType' : 'Add to Cart',
                    'event'    : 'Add to Cart'
                  });
                  if (__prg__.debug) {
                    console.log("Add to Cart"+" :"+JSON.stringify(product, null, " "));
                  }
                }
              }
              // --------------------------------------------- get Json response
            });
          },1000);

        {% else %}

        dataLayer.push(product, {
          'pageType' : 'Add to Cart',
          'event'    : 'Add to Cart'
        });

        if (__prg__.debug) {
          console.log("Add to Cart"+" :"+JSON.stringify(product, null, " "));
        }

        {% endif %}

        // IF DYNAMIC CART IS TRUE
        if (__prg__.dynamicCart) {
          console.log("dynamic");

          var cartCheck = setInterval(function () {

            if ($(__prg__.cartVisableSelector).length > 0) {

              clearInterval(cartCheck);
              mapJSONcartData();

              $(__prg__.removeCartTrigger).on('click', function (event) {

                var link = $(this).attr("href");
                jQuery.getJSON(link, function (response) {

                  __prg__.removeCart = response;
                var removeFromCart = {
                  'products': __prg__.removeCart.items.map(function (line_item) {
                    return {
                      'id'       : line_item.id,
                      'sku'      : line_item.sku,
                      'variant'  : line_item.variant_id,
                      'name'     : line_item.title,
                      'price'    : (line_item.price/100),
                      'quantity' : line_item.quantity
                    }
                  }),
                  'pageType' : 'Remove from Cart',
                  'event'    : 'Remove from Cart'
                };

                dataLayer.push(removeFromCart);

                if (__prg__.debug) {
                  console.log("Cart"+" :"+JSON.stringify(removeFromCart, null, " "));
                }
              });
            });
          }
        }, 500);
        // ---------------------------------- if dynamic cart is true
        }
      }

      $(document).on('click', __prg__.cartTriggers, function() {
        __prg__addtocart();
      });



    });

    /* DATALAYER: Template-Specific Events
    -----------------------
    Fire the event we've spent the rest of the dataLayer building. */

    dataLayer.push(baseEvent);
    dataLayer.push(logState);

    /* DATALAYER: All Pages
    -----------------------
    Fire all pages trigger after all additional dataLayers have loaded. */

    dataLayer.push({
      'event': 'DataLayer Loaded'
    });

  }());

</script>
